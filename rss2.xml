<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sakiko&#39;s Blog</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>弱い私はもう死にました。</description>
    <pubDate>Tue, 03 Sep 2024 13:33:13 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>测试</title>
      <link>http://example.com/2024/08/27/hello-world/</link>
      <guid>http://example.com/2024/08/27/hello-world/</guid>
      <pubDate>Tue, 27 Aug 2024 08:19:02 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;D 的 Sol 参考自 Unique_Hanpi，部分 $LateX$ 来源于 cxm1024&lt;/p&gt;
&lt;h1 id=&quot;A-holiday-假期计划&quot;&gt;&lt;a href=&quot;#A-holiday-假期计划&quot; class=&quot;headerlink&quot; title=&quot;A.holiday</description>
        
      
      
      
      <content:encoded><![CDATA[<p>D 的 Sol 参考自 Unique_Hanpi，部分 $LateX$ 来源于 cxm1024</p><h1 id="A-holiday-假期计划"><a href="#A-holiday-假期计划" class="headerlink" title="A.holiday 假期计划"></a>A.holiday 假期计划</h1><p>题意：给定一个 $n$ 个点 $m$ 条边组成的无向图，保证无自环和重边， 每个点有点权。</p><p>选出四个点 $a_i$，使这四个点点权之和最大，且满足以下性质：</p><ul><li>$\operatorname{dis}(a_i,a_{i+1}) \le k + 1, i \in [1, 3]$</li><li>$\operatorname{dis}(1, a_1) \le k + 1, \operatorname{dis}(a_4, 1) \le k + 1$</li></ul><p>Sol：由于 $a_1$, $a_4$ 的范围是较为确定的，所以我们很自然的联想到枚举 $a_2$, $a_3$。</p><p>首先预处理出所有点各自之间的距离，在求出对于点 $i$，满足 $\operatorname{dis}(i, j) \le k + 1, \operatorname{dis}(j, 1) \le k + 1$ 的 $j$ 的点权最大值，次大值，次次大值。</p><p>最后我们暴力枚举 $a_2, a_3$，记录答案。</p><p>为什么只需要求出前三大的值？是因为我们发现不满足的情况，即点重合的情况最多只会有 $a_2(j) &#x3D; a_3&#x2F;a_3(j) &#x3D; a_2$，$a_2(j) &#x3D; a_3(j)$两种。</p><p>复杂度分析： </p><p>$BFS$ &#x2F; $dijskra$ ： $O(nm) &#x2F; O(n\log n)$，求前三大值：$O(n^2)$，暴力枚举：$O(n^2)$，总时间复杂度：$O(nm + n^2)&#x2F;O(nlogn + n^2)$</p><h1 id="B-game-策略游戏"><a href="#B-game-策略游戏" class="headerlink" title="B.game 策略游戏"></a>B.game 策略游戏</h1><p>题意：见原题题面。</p><p>Sol：牺牲思考的代价是巨大的码量。</p><p>显然此题与两个区间内最大值，最小值以及正数、负数和0相关。</p><p>所以我们开两个线段树，无脑维护区间最大正数，最小正数，最大负数，最小负数，区间内有无正数，区间内有无负数，区间内有无 0。</p><p>最后暴力分类讨论。</p><p>这样我们就得到了一个常数巨大无比的 $O(q\log n)$ 算法。</p><h1 id="C-galaxy-星战"><a href="#C-galaxy-星战" class="headerlink" title="C.galaxy 星战"></a>C.galaxy 星战</h1><p>题意：给定一个 $n$ 个点 $m$ 条边组成的有向图 <del>(怎么还是图论)</del>，有 4 种修改：</p><ul><li>删掉 $u \rightarrow v$ 之间的一条边，保证操作有效</li><li>恢复 $u \rightarrow v$ 之间的一条边，保证操作有效</li><li>删掉终点为 $u$ 的所有边，不保证操作有效</li><li>恢复终点为 $u$ 的所有边，不保证操作有效</li></ul><p>查询每次操作后，每个点的出度是否都恰为 1.</p><p>Sol：考虑维护每个点的出度。设可重集 $S$ 为所有边的起点构成的集合，那么符合要求的 $S$ 即为 $1\sim n$。我们对于每个点随机赋予一个相异权值，那么就可以将 $S$ 中元素的点权相加计为 $S$ 的 $\operatorname{hash}$ 值。</p><p>维护当前的 $\operatorname{hash}$ 值 $H$。每次操作完将 $H$ 与 $S$ 进行比较。</p><p>对于操作 1、2，直接对 $H$ 加减 $u$ 的点权即可。</p><p>对于操作 3、4，我们预处理初始点 $i$ 入边对应的起点的集合的 $\operatorname{hash}$ 值 $U_i$，维护当前点 $i$ 入边对应的起点的集合的 $\operatorname{hash}$ 值 $C_i$，每次操作将 $H$ 加减 $(U_u - C_u) &#x2F; C_u$。</p><p>每次操作完更新 $C$ 的值即可。</p><p>复杂度 $O(n)$。</p><h1 id="D-transmit-数据运输"><a href="#D-transmit-数据运输" class="headerlink" title="D.transmit 数据运输"></a>D.transmit 数据运输</h1><p>题意：给定一颗 $n$ 个节点构成的树，每个点有点权。给定 $k$，对于每次询问，给定 $u, v$，求出从 $u$ 每次跳最多 $k$ 步到达 $v$ 的最小点权和。</p><p>Sol: 当 $k &#x3D; 1$ 时，显然答案即为 $u, v$ 简单路径上的点权和，倍增求解即可。</p><p>当 $k &#x3D; 2$ 时，有以下三种走法：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/sl444api.png"></p><p>而我们发现第三种走法是不用考虑的，因为走法 3 下一步必须到之前走法 1，2 的点，肯定不如直接走走法 1，2更优。</p><p>所以 $k &#x3D; 2$ 可以将问题转化为 $u,v$ 之间简单路径上每次跳 1 或 2 步的最小点权和。</p><p>$k &#x3D; 3$ 与之前最大的不同就是跳点的范围不再是简单路径上的点。根据 $k &#x3D; 2$ 的思路，我们可以推出这个范围是 $u,v$ 之间的简单路径，路径上挂着长度最大为 1 的一条 “毛毛虫”。如图：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/45feq5sk.png"></p><p>这样我们将问题转化为在这样一个“毛毛虫”上每次跳最多 $k$ 步的最小点权和。</p><p>很容易联想到<a href="https://www.luogu.com.cn/problem/P2279">消防局的设立</a>的dp。类似地设计状态 $f_{i, 0&#x2F;1&#x2F;2}$ 表示到达与点 $i$ 距离为 $0&#x2F;1&#x2F;2$ 的答案。转移方程：</p><p>$$<br>\begin{aligned}<br>f_{i,0} &amp;&#x3D;\min(f_{i-1,0}+val_i,f_{i-1,1}+val_i,f_{i-1,2}+val_i)\<br>f_{i,1} &amp;&#x3D;\min(f_{i-1,0},f_{i-1,1}+val_{mn_i})\<br>f_{i,2} &amp;&#x3D; f_{i-1,0}<br>\end{aligned}<br>$$</p><p>其中 $mn_i$ 表示与 $i$ 相邻的点权最小值，这个可以预处理得到。$val_i$ 表示点权。</p><p>这个转移方程对 $k &#x3D; 1$ 和 $k &#x3D; 2$ 时同样适用，将第二维缩小即可。需要注意的是当 $k &#x3D; 2$ 时需要将 $val_{mn_i}$ 设为 $+\infty$，因为我们无法从 $f_{i - 1, 1}$ 转移而来。</p><p>这样我们可以过掉 $O(qn)$ 和特殊性质的点。考虑优化转移。</p><p>我们通过观察(呃呃)可以发现这个转移可以通过矩阵加速。新定义矩阵乘法 $[AB]<em>{i,j}&#x3D;\min\limits_k{A</em>{i,k}+B_{k,j}}$。此矩阵乘法同样具有结合律：</p><p>$$<br>\begin{aligned}<br>[A\cdot (B\cdot C)]<em>{i,j}&amp;&#x3D;\min\limits_k{A</em>{i,k}+[B\cdot C]<em>{k,j}}\<br>&amp;&#x3D;\min\limits_k\left{A</em>{i,k}+\min\limits_p{B_{k,p}+C_{p,j}}\right}\<br>&amp;&#x3D;\min\limits_k\left{\min\limits_p{A_{i,k}+B_{k,p}+C_{p,j}}\right}\<br>&amp;&#x3D;\min\limits_p\left{\min\limits_k{A_{i,k}+B_{k,p}+C_{p,j}}\right}\<br>&amp;&#x3D;\min\limits_p\left{\min\limits_k{A_{i,k}+B_{k,p}}+C_{p,j}\right}\<br>&amp;&#x3D;\min\limits_p{[A\cdot B]<em>{i,p}+C</em>{p,j}}\<br>&amp;&#x3D;[(A\cdot B)\cdot C]_{i,j}<br>\end{aligned}<br>$$</p><p>我们将 dp 转移转化为矩阵乘法：</p><h1 id="begin-bmatrix-f-i-1-0-f-i-1-1-f-i-1-2-end-bmatrix-cdot-begin-bmatrix-val-i-0-infty-val-i-val-mn-i-0-val-i-infty-infty-end-bmatrix"><a href="#begin-bmatrix-f-i-1-0-f-i-1-1-f-i-1-2-end-bmatrix-cdot-begin-bmatrix-val-i-0-infty-val-i-val-mn-i-0-val-i-infty-infty-end-bmatrix" class="headerlink" title="$$\begin{bmatrix}f_{i-1,0} &amp; f_{i-1,1} &amp; f_{i-1,2}\\end{bmatrix}\cdot\begin{bmatrix}val_i &amp; 0 &amp; +\infty\val_i &amp; val_{mn_i} &amp; 0\val_i &amp; +\infty &amp; +\infty\end{bmatrix}"></a>$$<br>\begin{bmatrix}<br>f_{i-1,0} &amp; f_{i-1,1} &amp; f_{i-1,2}\<br>\end{bmatrix}<br>\cdot<br>\begin{bmatrix}<br>val_i &amp; 0 &amp; +\infty\<br>val_i &amp; val_{mn_i} &amp; 0\<br>val_i &amp; +\infty &amp; +\infty<br>\end{bmatrix}</h1><p>\begin{bmatrix}<br>f_{i,0} &amp; f_{i,1} &amp; f_{i,2}\<br>\end{bmatrix}<br>$$</p><p>由于矩阵乘法的性质，我们可以通过倍增转移方程。预处理 $up_{i, j}$ 为 $i$ 向上跳 $2^j$ 步的转移矩阵乘积，$down_{i, j}$ 为 $i$ 向上 $2^j$ 的祖先向下跳 $2^j$ 步的矩阵转移乘积。</p><p>求出 $u,v$ 两点的 $lca$，设 $u$ 到 $lca$ 的初始矩阵为<br>$$<br>\begin{bmatrix}<br>val_u &amp; +\infty &amp; +\infty\<br>+\infty &amp; +\infty &amp; +\infty\<br>+\infty &amp; +\infty &amp; +\infty<br>\end{bmatrix}<br>$$</p><p>设 $v$ 到 $lca$ 的初始矩阵为单位矩阵</p><p>$$<br>\begin{bmatrix}<br>0 &amp; +\infty &amp; +\infty\<br>+\infty &amp; 0 &amp; +\infty\<br>+\infty &amp; +\infty &amp; 0<br>\end{bmatrix}<br>$$</p><p>主对角线是 $0$ 而不是 $1$ 的原因是这个矩阵乘法是新定义的。</p><p>我们倍增求出 $u$ 通过 $up$ 矩阵转移到 $lca$ 的答案，再求出 $v$ 通过 $down$ 矩阵转移到 $lca$ 的答案。两者相乘得到矩阵的 $(0,0)$ 即为答案。</p><p>时间复杂度: $O(qk^3\log n + n\log n)$</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B5%8B%E8%AF%95/">测试</category>
      
      
      <category domain="http://example.com/tags/%E6%B5%8B%E8%AF%95/">测试</category>
      
      
      <comments>http://example.com/2024/08/27/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
