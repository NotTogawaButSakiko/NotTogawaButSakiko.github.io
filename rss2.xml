<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sakiko&#39;s Blog</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>弱い私はもう死にました。</description>
    <pubDate>Tue, 03 Sep 2024 13:36:11 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>测试</title>
      <link>http://example.com/2024/09/03/hello-world/</link>
      <guid>http://example.com/2024/09/03/hello-world/</guid>
      <pubDate>Tue, 03 Sep 2024 13:36:09 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;CF1060H-Sophisticated-Device&quot;&gt;&lt;a href=&quot;#CF1060H-Sophisticated-Device&quot; class=&quot;headerlink&quot; title=&quot;CF1060H Sophisticated Device&quot;&gt;&lt;/a&gt;CF1060H Sophisticated Device&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;主体思路借鉴于&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3VzZXIvMzc2NzY=&quot;&gt;@破壁人五号&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;的题解，菜鸡在此之上做了一些小改动和优化（？），并且感谢同机房大佬&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3VzZXIvMTU0OTcw&quot;&gt;@Surround_By_Gugugu&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;提供的优化思路。%%%%%%%&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vQ0YxMDYwSA==&quot;&gt;题目传送门&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;Step-1-转化&quot;&gt;&lt;a href=&quot;#Step-1-转化&quot; class=&quot;headerlink&quot; title=&quot;Step 1 转化&quot;&gt;&lt;/a&gt;Step 1 转化&lt;/h2&gt;&lt;p&gt;我们只能进行两个操作：加法和 $d$ 次幂。而我们要求的是 $xy(mod&#92; p)$。我们自然而然地想到&lt;strong&gt;龟速乘&lt;/strong&gt;，但显然龟速乘无法适用于两个未知量相乘。似乎已经无处下手了。&lt;/p&gt;
&lt;p&gt;我们再来看看我们要求的式子，面对如此熟悉的式子，很自然我们就能想到它能转化成 $&#92;frac{(x + y) ^ 2 - x^2 - y^2}{2}$ ，并且这个式子满足对称性，所以问题就转化为了如何构造指令，使得 $&#92;frac{(x + y) ^ 2 - x^2 - y^2}{2}$ 出现在其中一个格子里。&lt;/p&gt;
&lt;h2 id=&quot;Step-2-乘法&quot;&gt;&lt;a href=&quot;#Step-2-乘法&quot; class=&quot;headerlink&quot; title=&quot;Step 2 乘法&quot;&gt;&lt;/a&gt;Step 2 乘法&lt;/h2&gt;&lt;p&gt;龟速乘。&lt;/p&gt;
&lt;h2 id=&quot;Step-3-减法&quot;&gt;&lt;a href=&quot;#Step-3-减法&quot; class=&quot;headerlink&quot; title=&quot;Step 3 减法&quot;&gt;&lt;/a&gt;Step 3 减法&lt;/h2&gt;&lt;p&gt;$a +(p-1)b ≡ a-b(mod&#92; p)$&lt;/p&gt;
&lt;h2 id=&quot;Step-4-除法&quot;&gt;&lt;a href=&quot;#Step-4-除法&quot; class=&quot;headerlink&quot; title=&quot;Step 4 除法&quot;&gt;&lt;/a&gt;Step 4 除法&lt;/h2&gt;&lt;p&gt;乘法逆元。楼上用的是扩欧求逆元，但 $p$ 给定的是质数，显然可以用费马小定理求逆元。&lt;/p&gt;
&lt;h2 id=&quot;Step-5-平方&quot;&gt;&lt;a href=&quot;#Step-5-平方&quot; class=&quot;headerlink&quot; title=&quot;Step 5 平方&quot;&gt;&lt;/a&gt;Step 5 平方&lt;/h2&gt;&lt;p&gt;思路来自于&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3VzZXIvMzc2NzY=&quot;&gt;@破壁人五号&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;当无法直接求出一个数的幂时，我们考虑构造一个多项式来求解。&lt;del&gt;也就是瞎凑&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;我们将 $x^2$ 用 $&#92;Sigma^d_{i&amp;#x3D;0} a_i(x+i)^{d - i}$ 来表示，展开后即为&lt;br&gt;$$x^2&amp;#x3D;&#92;Sigma^d_{i&amp;#x3D;0} C(d,i)x^{d-i}&#92;Sigma^d_{j &amp;#x3D; 0}a_jj^i$$&lt;br&gt;显然，对于 $x^i(i &#92;ne 2)$ 项时，我们要使 $C(d,i)&#92;Sigma^d_{j &amp;#x3D; 0}a_jj^i$ 为 0（此时可以顺便把 $C(d,i)$ 约掉），而对于二次项时为1。我们便可以推出一个 $d+1$ 项线性方程组，用高斯消元求解即可。&lt;/p&gt;
&lt;h2 id=&quot;Step-6-“0”&quot;&gt;&lt;a href=&quot;#Step-6-“0”&quot; class=&quot;headerlink&quot; title=&quot;Step 6 “0”&quot;&gt;&lt;/a&gt;Step 6 “0”&lt;/h2&gt;&lt;p&gt;其实不用非要求0，但是求0后可以更快并且更清晰地构造代码。&lt;/p&gt;
&lt;p&gt;加 $p-1$ 次1即可。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="CF1060H-Sophisticated-Device"><a href="#CF1060H-Sophisticated-Device" class="headerlink" title="CF1060H Sophisticated Device"></a>CF1060H Sophisticated Device</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主体思路借鉴于<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3VzZXIvMzc2NzY=">@破壁人五号<i class="fa fa-external-link-alt"></i></span>的题解，菜鸡在此之上做了一些小改动和优化（？），并且感谢同机房大佬<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3VzZXIvMTU0OTcw">@Surround_By_Gugugu<i class="fa fa-external-link-alt"></i></span>提供的优化思路。%%%%%%%</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vQ0YxMDYwSA==">题目传送门<i class="fa fa-external-link-alt"></i></span></p><h2 id="Step-1-转化"><a href="#Step-1-转化" class="headerlink" title="Step 1 转化"></a>Step 1 转化</h2><p>我们只能进行两个操作：加法和 $d$ 次幂。而我们要求的是 $xy(mod\ p)$。我们自然而然地想到<strong>龟速乘</strong>，但显然龟速乘无法适用于两个未知量相乘。似乎已经无处下手了。</p><p>我们再来看看我们要求的式子，面对如此熟悉的式子，很自然我们就能想到它能转化成 $\frac{(x + y) ^ 2 - x^2 - y^2}{2}$ ，并且这个式子满足对称性，所以问题就转化为了如何构造指令，使得 $\frac{(x + y) ^ 2 - x^2 - y^2}{2}$ 出现在其中一个格子里。</p><h2 id="Step-2-乘法"><a href="#Step-2-乘法" class="headerlink" title="Step 2 乘法"></a>Step 2 乘法</h2><p>龟速乘。</p><h2 id="Step-3-减法"><a href="#Step-3-减法" class="headerlink" title="Step 3 减法"></a>Step 3 减法</h2><p>$a +(p-1)b ≡ a-b(mod\ p)$</p><h2 id="Step-4-除法"><a href="#Step-4-除法" class="headerlink" title="Step 4 除法"></a>Step 4 除法</h2><p>乘法逆元。楼上用的是扩欧求逆元，但 $p$ 给定的是质数，显然可以用费马小定理求逆元。</p><h2 id="Step-5-平方"><a href="#Step-5-平方" class="headerlink" title="Step 5 平方"></a>Step 5 平方</h2><p>思路来自于<span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3VzZXIvMzc2NzY=">@破壁人五号<i class="fa fa-external-link-alt"></i></span>。</p><p>当无法直接求出一个数的幂时，我们考虑构造一个多项式来求解。<del>也就是瞎凑</del></p><p>我们将 $x^2$ 用 $\Sigma^d_{i&#x3D;0} a_i(x+i)^{d - i}$ 来表示，展开后即为<br>$$x^2&#x3D;\Sigma^d_{i&#x3D;0} C(d,i)x^{d-i}\Sigma^d_{j &#x3D; 0}a_jj^i$$<br>显然，对于 $x^i(i \ne 2)$ 项时，我们要使 $C(d,i)\Sigma^d_{j &#x3D; 0}a_jj^i$ 为 0（此时可以顺便把 $C(d,i)$ 约掉），而对于二次项时为1。我们便可以推出一个 $d+1$ 项线性方程组，用高斯消元求解即可。</p><h2 id="Step-6-“0”"><a href="#Step-6-“0”" class="headerlink" title="Step 6 “0”"></a>Step 6 “0”</h2><p>其实不用非要求0，但是求0后可以更快并且更清晰地构造代码。</p><p>加 $p-1$ 次1即可。</p><span id="more"></span><h2 id="AC-Code"><a href="#AC-Code" class="headerlink" title="AC Code"></a>AC Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CF1060H</span></span><br><span class="line"><span class="comment">//构造+高斯消元+逆元 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;<span class="comment">//快读 </span></span><br><span class="line">ll s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) w = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;s = (s &lt;&lt; <span class="number">1</span>) + (s &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line">ll d, p, a[<span class="number">15</span>][<span class="number">15</span>], tot = <span class="number">2</span>, m[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zero</span><span class="params">()</span></span>&#123;<span class="comment">//在5000位存0 </span></span><br><span class="line">ll b = p - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b &amp; <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;+ 5000 4999 5000\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+ 4999 4999 4999\n&quot;</span>);</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">quickpow</span><span class="params">(ll x, ll y)</span></span>&#123;<span class="comment">//快速幂</span></span><br><span class="line">ll ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(y)&#123;</span><br><span class="line"><span class="keyword">if</span>(y &amp; <span class="number">1</span>)ans = ans * x % p;</span><br><span class="line">x = x * x % p;</span><br><span class="line">y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">guass</span><span class="params">()</span></span>&#123; <span class="comment">//高斯-约旦消元 </span></span><br><span class="line"><span class="comment">//约旦消元对于高斯消元的优点在于不用回带。高斯消元解完后为一个上三角行列式，约旦消元解完后为对角型行列式。</span></span><br><span class="line"><span class="keyword">for</span>(re ll i = <span class="number">0</span>; i &lt;= d; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(re ll j = <span class="number">0</span>; j &lt;= d; j++)&#123;</span><br><span class="line">            a[i][j] = <span class="built_in">quickpow</span>(j, i);</span><br><span class="line">            <span class="keyword">if</span>(i == d - <span class="number">2</span>)a[i][j] = a[i][j] * d  * (d - <span class="number">1</span>) / <span class="number">2</span> % p;</span><br><span class="line">        &#125;       </span><br><span class="line"><span class="keyword">if</span>(i == d - <span class="number">2</span>)a[i][d + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>a[i][d + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re ll i = <span class="number">0</span>; i &lt;= d; i++)&#123;</span><br><span class="line">ll mmax = i;</span><br><span class="line"><span class="keyword">for</span>(re ll j = i + <span class="number">1</span>; j &lt;= d; j++)<span class="keyword">if</span>(<span class="built_in">fabs</span>(a[j][i]) &gt; <span class="built_in">fabs</span>(a[mmax][i]))mmax = j;</span><br><span class="line"><span class="keyword">for</span>(re ll j = <span class="number">0</span>; j &lt;= d + <span class="number">1</span>; j++)<span class="built_in">swap</span>(a[i][j], a[mmax][j]);</span><br><span class="line"><span class="keyword">for</span>(re ll j = <span class="number">0</span>; j &lt;= d; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j == i)<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">double</span> b = a[j][i] * <span class="built_in">quickpow</span>(a[i][i], p - <span class="number">2</span>) % p;</span><br><span class="line"><span class="keyword">for</span>(ll k = <span class="number">0</span>; k &lt;= d + <span class="number">1</span>; k++)&#123;</span><br><span class="line">a[j][k] -= a[i][k] * b;</span><br><span class="line">a[j][k] = (a[j][k] % p + p) % p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re ll i = <span class="number">0</span>; i &lt;= d; i++)m[i + <span class="number">1</span>] = a[i][d + <span class="number">1</span>] * <span class="built_in">quickpow</span>(a[i][i], p - <span class="number">2</span>) % p;<span class="comment">//将解存入数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">multi</span><span class="params">(ll x, ll y)</span></span>&#123;<span class="comment">//乘法 </span></span><br><span class="line">ll b = y % p;</span><br><span class="line">ll a = ++tot;</span><br><span class="line">ll ans = ++tot;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+ 5000 5000 %lld\n&quot;</span>, ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+ 5000 %lld %lld\n&quot;</span>, x, a);</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b &amp; <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">&quot;+ %lld %lld %lld\n&quot;</span>, a, ans, ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+ %lld %lld %lld\n&quot;</span>, a, a, a);</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">ll <span class="title">getpow</span><span class="params">(ll x)</span></span>&#123;<span class="comment">//平方 </span></span><br><span class="line">ll a = ++tot;</span><br><span class="line">ll b = ++tot;</span><br><span class="line">ll ans = ++tot;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+ 5000 %lld %lld\n&quot;</span>, x, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+ 5000 5000 %lld\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+ 5000 5000 %lld\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">for</span>(re ll i = <span class="number">1</span>; i &lt;= d + <span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+ %lld %lld %lld\n&quot;</span>, a, b, ++tot);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;^ %lld %lld\n&quot;</span>, tot, tot + <span class="number">1</span>);</span><br><span class="line">tot++;</span><br><span class="line">ll tmp = <span class="built_in">multi</span>(tot, m[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+ 4998 %lld %lld\n&quot;</span>, b, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+ %lld %lld %lld\n&quot;</span>, ans, tmp, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Minus</span><span class="params">(ll a, ll b)</span></span>&#123;<span class="comment">//减法 </span></span><br><span class="line">b = <span class="built_in">multi</span>(b, p - <span class="number">1</span>);</span><br><span class="line">ll ans = ++tot;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+ %lld %lld %lld\n&quot;</span>, a, b, ans);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">d = <span class="built_in">read</span>(), p = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">zero</span>();<span class="built_in">guass</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+ 1 2 %lld\n&quot;</span>, ++tot);</span><br><span class="line">ll xplusy2 = <span class="built_in">getpow</span>(tot), x2 = <span class="built_in">getpow</span>(<span class="number">1</span>), y2 = <span class="built_in">getpow</span>(<span class="number">2</span>);</span><br><span class="line">ll fz = <span class="built_in">Minus</span>(<span class="built_in">Minus</span>(xplusy2, x2), y2);</span><br><span class="line">ll ans = <span class="built_in">multi</span>(fz, <span class="built_in">quickpow</span>(<span class="number">2</span>, p - <span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;f %lld&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%B5%8B%E8%AF%95/">测试</category>
      
      
      <category domain="http://example.com/tags/%E6%B5%8B%E8%AF%95/">测试</category>
      
      
      <comments>http://example.com/2024/09/03/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
