<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sakiko&#39;s Blog</title>
    <link>http://nottogawabutsakiko.github.io/</link>
    
    <atom:link href="http://nottogawabutsakiko.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>弱い私はもう死にました。</description>
    <pubDate>Mon, 07 Oct 2024 10:56:49 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title></title>
      <link>http://nottogawabutsakiko.github.io/uncategorized/binary%20search/</link>
      <guid>http://nottogawabutsakiko.github.io/uncategorized/binary%20search/</guid>
      <pubDate>Mon, 07 Oct 2024 10:56:49 GMT</pubDate>
      
      
      
      
      
      
      <comments>http://nottogawabutsakiko.github.io/uncategorized/binary%20search/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>单调栈与单调队列</title>
      <link>http://nottogawabutsakiko.github.io/%E7%AC%94%E8%AE%B0/dandiao/</link>
      <guid>http://nottogawabutsakiko.github.io/%E7%AC%94%E8%AE%B0/dandiao/</guid>
      <pubDate>Mon, 07 Oct 2024 07:00:39 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;单调栈&quot;&gt;&lt;a href=&quot;#单调栈&quot; class=&quot;headerlink&quot; title=&quot;单调栈&quot;&gt;&lt;/a&gt;单调栈&lt;/h1&gt;&lt;p&gt;单调栈顾名思义，就是符合单调性的栈。&lt;/p&gt;
&lt;p&gt;将一个元素插入单调栈时，为了维护栈的单调性，需要在保证将该元素插入到栈顶后整个栈</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><p>单调栈顾名思义，就是符合单调性的栈。</p><p>将一个元素插入单调栈时，为了维护栈的单调性，需要在保证将该元素插入到栈顶后整个栈满足单调性的前提下弹出最少的元素。</p><p>例如 $ {  1, 4, 6, 7 } $, 此时我们插入元素 $5$, 则需弹出栈顶的 $6,7$, 结果为 ${  1, 4, 5 }$</p><p>伪代码实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert x</span><br><span class="line">while !sta.empty() &amp;&amp; sta.top()&lt;x</span><br><span class="line">    sta.pop()</span><br><span class="line">sta.push(x)</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>一个最直接的应用即是对一个序列求每个元素左侧\右侧第一个比它大\小的元素或求每个元素前\后比它大\小的元素数，这也是单调栈定义的直接体现。</p><h3 id="单调栈-二分"><a href="#单调栈-二分" class="headerlink" title="单调栈+二分"></a>单调栈+二分</h3><p>通过单调栈自身的单调性质，我们显然可以在这之上进行二分查找。</p><h4 id="最长上升子序列问题-LIS"><a href="#最长上升子序列问题-LIS" class="headerlink" title="最长上升子序列问题(LIS)"></a>最长上升子序列问题(LIS)</h4><p>维护一个单调上升栈 $f$ , 从左到右遍历，每遍历到一个新的数就比较栈顶。若比栈顶大就加到栈顶，否则替换掉第一个大于等于它的数。</p><h4 id="离线区间最值问题-RMQ"><a href="#离线区间最值问题-RMQ" class="headerlink" title="离线区间最值问题(RMQ)"></a>离线区间最值问题(RMQ)</h4><p>我们将查询按右端点排序，从左到右按照值的大小将序列下标放入单调栈，每次遇到右端点就二分查找单调栈中大于等于左端点的位置。</p><h1 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h1><p>符合单调性的队列，是单调栈的扩展</p><p>有些问题对于所求问题的要求并不是一边有界而是两边有界的。比如一个序列求每个元素左侧\右侧第一个比它大\小的元素且距离与该元素不能大于 $k$ 或连续 $k$ 个数的最大值。</p><p>此时我们若依然用单调栈去维护，那么一些压在栈底的元素就无法删除。</p><p>所以我们需要用单调队列使得数据结构两端都可以删除元素。</p><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubHVvZ3UuY29tLmNuL3Byb2JsZW0vUDE4ODY=">模板<i class="fa fa-external-link-alt"></i></span></p><p>有一个长为 $n$ 的序列 $a$，以及一个大小为 $k$ 的窗口。现在这个从左边开始向右滑动，每次滑动一个单位，求出每次滑动后窗口中的最大值和最小值。</p><p>例如，对于序列 $[1,3,-1,-3,5,3,6,7]$ 以及 $k &#x3D; 3$，有如下过程：</p><p>$$<br>\def\arraystretch{1.2}<br>\begin{array}{c|c|c}<br>\textsf{窗口位置} &amp; \textsf{最小值} &amp; \textsf{最大值} \<br>\verb![1   3  -1] -3   5   3   6   7 ! &amp; -1 &amp; 3 \<br>\verb! 1  [3  -1  -3]  5   3   6   7 ! &amp; -3 &amp; 3 \<br>\verb! 1   3 [-1  -3   5]  3   6   7 ! &amp; -3 &amp; 5 \<br>\verb! 1   3  -1 [-3   5   3]  6   7 ! &amp; -3 &amp; 5 \<br>\verb! 1   3  -1  -3  [5   3   6]  7 ! &amp; 3 &amp; 6 \<br>\verb! 1   3  -1  -3   5  [3   6   7]! &amp; 3 &amp; 7 \<br>\end{array}<br>$$</p><p>伪代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for i from 1 to n</span><br><span class="line">    while(!empty() &amp;&amp; a[back()] &gt;= a[i])</span><br><span class="line">        pop_back()</span><br><span class="line">    push_back(i)</span><br><span class="line">    while(back() - front() &gt;= k)    </span><br><span class="line">        pop_front()</span><br><span class="line">    ouput(front())</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://nottogawabutsakiko.github.io/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://nottogawabutsakiko.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <comments>http://nottogawabutsakiko.github.io/%E7%AC%94%E8%AE%B0/dandiao/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>双指针（尺取法）</title>
      <link>http://nottogawabutsakiko.github.io/%E7%AC%94%E8%AE%B0/two%20pointers/</link>
      <guid>http://nottogawabutsakiko.github.io/%E7%AC%94%E8%AE%B0/two%20pointers/</guid>
      <pubDate>Sun, 06 Oct 2024 12:00:12 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;当你遇到类似以下几个问题时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;序列按一定规则排序后，可利用序列有序性操作。这类题目一般也可使用二分。&lt;/li&gt;
&lt;li&gt;维护符合规则的区间信息，且增减元素方便&lt;/li&gt;
&lt;li&gt;符合贪心，一般是求类似较小值最大或较大值最小的问题&lt;/li&gt;
&lt;/ul</description>
        
      
      
      
      <content:encoded><![CDATA[<p>当你遇到类似以下几个问题时：</p><ul><li>序列按一定规则排序后，可利用序列有序性操作。这类题目一般也可使用二分。</li><li>维护符合规则的区间信息，且增减元素方便</li><li>符合贪心，一般是求类似较小值最大或较大值最小的问题</li></ul><p>那么这种一般是 <strong>双指针</strong> 问题。</p><p>双指针，顾名思义，同时维护两个指针在数据上遍历，从而将二维问题降维线性解决。</p>]]></content:encoded>
      
      
      <category domain="http://nottogawabutsakiko.github.io/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://nottogawabutsakiko.github.io/tags/%E7%AE%97%E6%B3%95-%E9%99%8D%E7%BB%B4/">算法 | 降维</category>
      
      
      <comments>http://nottogawabutsakiko.github.io/%E7%AC%94%E8%AE%B0/two%20pointers/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>离散化</title>
      <link>http://nottogawabutsakiko.github.io/%E7%AC%94%E8%AE%B0/lisanhua/</link>
      <guid>http://nottogawabutsakiko.github.io/%E7%AC%94%E8%AE%B0/lisanhua/</guid>
      <pubDate>Sat, 05 Oct 2024 17:00:43 GMT</pubDate>
      
      <description>&lt;p&gt;首先提出一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定 $n$ 个坐标 $x_i$ ，表示这个坐标上有一个标记，现在给出 $m$ 询问，区间内有多少标记。 $n &#92;le 10^5, x_i &#92;le 10^5, m &#92;le 10^5$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问题很简单，我们只需在坐标的维度上开桶，维护前缀和即可。&lt;/p&gt;
&lt;p&gt;但是如果 $x_i$ 的范围变到 $10^8$ 呢？甚至 $10^{18}$ ?&lt;/p&gt;
&lt;p&gt;若内存限制为 $128MB$ 的话，$int$ 数组大概只能开到 $3×10^7$，我们是无法在规定空间内完成的。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>首先提出一个问题：</p><blockquote><p>给定 $n$ 个坐标 $x_i$ ，表示这个坐标上有一个标记，现在给出 $m$ 询问，区间内有多少标记。 $n \le 10^5, x_i \le 10^5, m \le 10^5$</p></blockquote><p>问题很简单，我们只需在坐标的维度上开桶，维护前缀和即可。</p><p>但是如果 $x_i$ 的范围变到 $10^8$ 呢？甚至 $10^{18}$ ?</p><p>若内存限制为 $128MB$ 的话，$int$ 数组大概只能开到 $3×10^7$，我们是无法在规定空间内完成的。</p><span id="more"></span><p>我们观察发现，坐标的个数和询问是较小的，我们若在坐标维度上开桶，有很多无效的点浪费了空间。</p><p>于是我们需要离散化算法，将坐标集合映射到一个数值更小的域，从而避免超出内存</p><p>事实上，当我们处理的坐标为类似浮点数，甚至字符时我们都可以使用离散化，本质上是通过哈希维护一个桶。</p><p>伪代码实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for i from 1 to n</span><br><span class="line">    tmp[++top] = a[i];</span><br><span class="line">for i from 1 to m</span><br><span class="line">    tmp[++top] = q[i];</span><br><span class="line">len = unique(tmp + 1, tmp + n + 1) - tmp - 1;</span><br><span class="line">for i from 1 to n</span><br><span class="line">    a[i] = lower_bound(tmp + 1, tmp + len + 1, a[i]) - tmp;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://nottogawabutsakiko.github.io/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://nottogawabutsakiko.github.io/tags/%E7%AE%97%E6%B3%95-%E9%99%8D%E7%BB%B4/">算法 | 降维</category>
      
      
      <comments>http://nottogawabutsakiko.github.io/%E7%AC%94%E8%AE%B0/lisanhua/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>复杂度</title>
      <link>http://nottogawabutsakiko.github.io/%E7%AC%94%E8%AE%B0/calculation%20therom%20base/</link>
      <guid>http://nottogawabutsakiko.github.io/%E7%AC%94%E8%AE%B0/calculation%20therom%20base/</guid>
      <pubDate>Sun, 29 Sep 2024 08:21:39 GMT</pubDate>
      
      <description>&lt;p&gt;在之前的博文中, 我们研究了时间复杂度, 这可以有效的帮助我们大体评析和优化算法。然而，不管我们多么尽力的优化算法，有些问题是极其 “难” 的，使得我们不能在很短的时间内解决。&lt;/p&gt;
&lt;p&gt;本文讲述的 $NP$ 类问题正是用来帮助我们评析一个 &lt;strong&gt;问题&lt;/strong&gt; 的复杂程度。注意的是本文并不形式化，即不引入语言体系。以及本文一切证明也非形式化。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>在之前的博文中, 我们研究了时间复杂度, 这可以有效的帮助我们大体评析和优化算法。然而，不管我们多么尽力的优化算法，有些问题是极其 “难” 的，使得我们不能在很短的时间内解决。</p><p>本文讲述的 $NP$ 类问题正是用来帮助我们评析一个 <strong>问题</strong> 的复杂程度。注意的是本文并不形式化，即不引入语言体系。以及本文一切证明也非形式化。</p><span id="more"></span><h1 id="判定问题与最优化问题"><a href="#判定问题与最优化问题" class="headerlink" title="判定问题与最优化问题"></a>判定问题与最优化问题</h1><p><strong>判定问题</strong> (decision problem) 指的是答案只有 “是” 或 “否” 的问题</p><p><strong>最优化问题</strong> (optimization problem) 其中每一个解有一个关联的值, 我们希望找出一个具有最佳值的可行解。如最短路问题就是一个最优化问题</p><p>在后面的 $NP-C$ 类问题中所描述的其实都是判定问题, 但是最优化问题是可以转化为多个判定问题。而判定问题相对于最优化问题来说，”难度” 一定是小于等于后者的。所以我们对于判定问题的讨论是可以帮助我们评价一个最优化问题的复杂度的。</p><h1 id="规约"><a href="#规约" class="headerlink" title="规约"></a>规约</h1><p>事实上，我们很难证明一个问题他到底 “难不难” , 因为人们到目前为止都没有证明出 $P$ 是否等于 $NP$ (后文会阐述)。</p><p>但是，问题的相对难度比较却是很容易的。我们可以通过一个已知难度的问题，通过比较来确定新问题的难度。这种比较就是 <strong>规约</strong> (reduction)</p><p>我们已知一个判定问题 $B$ , 和一个已知难度的判定问题 $A$ . 我们称一个问题的输入为 <strong>实例</strong> (instance) 。问题 $A$ 的实例为 $\alpha$ , 问题 $B$ 的实例为 $\beta$ , 如果任何实例 $\alpha$ 都可以转化成满足以下条件的实例 $\beta$ :</p><ul><li>转换操作在多项式时间之内</li><li>两个实例的解是相同的. 即若 $\alpha$ 的解是 “是”，则 $\beta$ 的解也应当是 “是”</li></ul><p>则我们称 $A$ 可以规约到 $B$ ,即 $B$ 的难度至少和 $A$ “一样难”。</p><p>例如一元一次方程可以规约到二元一次方程，则二元一次方程的难度大于等于前者。</p><h1 id="NP-类问题-nondeterministic-polynomial-time"><a href="#NP-类问题-nondeterministic-polynomial-time" class="headerlink" title="$NP$ 类问题 (nondeterministic polynomial time)"></a>$NP$ 类问题 (nondeterministic polynomial time)</h1><h2 id="P-类问题"><a href="#P-类问题" class="headerlink" title="$P$ 类问题"></a>$P$ 类问题</h2><p>$P$ 类问题指的是可以在多项式时间内找到解的问题。这类问题是最简单的问题，我们绝大部分解决的问题都是 $P$ 类问题。</p><h2 id="NP-类问题"><a href="#NP-类问题" class="headerlink" title="$NP$ 类问题"></a>$NP$ 类问题</h2><p>$NP$ 类问题指的是可以在多项式时间内验证一个答案的正确性。正如填数独是一个很困难的问题，然而去验证一个填好的数独是否正确却很简单。</p><p>显然，所有 $P$ 问题都是 $NP$ 类问题，那么，是否 $NP$ 问题也一定是 $P$ 问题呢？</p><p>我不知道。事实上，目前世界上还没有人知道。这个被誉为千禧年七大数学未解之谜之一的难题已经困扰了人们半个世纪，即 $P ≟ NP$</p><p>于是数学家想出了一个方法，我们把所有 $NP$ 类问题都规约到某一些问题，即某一些问题的难度不低于任何 $NP$ 类问题. 只要我们证明了这一些问题中的一个问题是 $P$ 类问题，我们就能证明所有 $NP$ 类问题都是 $P$ 类问题, 即 $P &#x3D; NP$.</p><p>这一些问题即为 $NP-Complete$ 问题, 也叫 $NP-C$ 问题。</p><h2 id="NP-C-类问题"><a href="#NP-C-类问题" class="headerlink" title="$NP-C$ 类问题"></a>$NP-C$ 类问题</h2><p>由上文可以看出，$NP-C$ 问题是最难的一类问题。如果一个问题是 $NP$ 类问题，且所有 $NP$ 类问题都可以规约到这个问题，则这个问题即为 $NP-C$ 类问题。</p><p>许多著名的问题都是 $NP-C$ 类问题，例如蛋白质的折叠和金融加密等等。遗憾的是，目前还没有一个 $NP-C$ 类问题得到解决。只要证明 $P &#x3D; NP$ , 人类文明将会得到突破性的飞跃。世界不再有癌症，一切密码都是无效的，任何人都可以成为莫扎特和高斯。。。</p><h3 id="第一个-NP-C-问题"><a href="#第一个-NP-C-问题" class="headerlink" title="第一个 $NP-C$ 问题"></a>第一个 $NP-C$ 问题</h3><p>我们知道，要证明一个 $NP-C$ 问题，首先要证明一个已知的 $NP-C$ 能规约到这个问题上。因此，我们必须已知一个 $NP-C$ 问题。这个问题即 <strong>电路可满足性问题</strong></p><p><strong>电路可满足性问题</strong> : 给定一个由 $AND$ , $OR$ 和 $NOT$ 组成的 <strong>布尔组合电路</strong> ，它是 <strong>可满足</strong> 电路 吗？</p><p><strong>布尔组合电路</strong> : 由一个或多个 <strong>布尔组合元素</strong> (<strong>逻辑门</strong>) 通过线路连接而成。需要注意布尔组合电路不包含回路。</p><p><strong>可满足</strong> : 如果一个单输出布尔组合电路具有一个可满足性赋值 (即使得电路的输出为 $1$ 的一个真值赋值), 就称该布尔组合电路是可满足的。</p><p>证明略。</p><h3 id="证明-NP-C-问题"><a href="#证明-NP-C-问题" class="headerlink" title="证明 $NP-C$ 问题"></a>证明 $NP-C$ 问题</h3><p>证明一个题无解或者证明一个题不能在多项式时间内完成都是极其困难的，然而证明 $NP-C$ 问题却相对简单:</p><ol><li>证明该问题为 $NP$ 问题</li><li>证明一个已知的 $NP-C$ 问题可以归约到该问题上</li></ol><h3 id="史上第一个被证明的-NP-C-问题"><a href="#史上第一个被证明的-NP-C-问题" class="headerlink" title="史上第一个被证明的 $NP-C$ 问题"></a>史上第一个被证明的 $NP-C$ 问题</h3><p>$SAT$ (布尔公式可满足性) 是史上第一个被证明的 $NP-C$ 问题。</p><ol><li>证明 $SAT$ 问题是 $NP$ 问题</li></ol><p>易得 $SAT$ 的一个解的证书可以在线性时间能得到验证。所以 $SAT$ 为 $NP$ 问题</p><ol start="2"><li>证明电路可满足性问题可以规约到 $SAT$ 问题</li></ol><p>易得电路可满足性问题是只有与、或、非的布尔公式。所以电路可满足性问题可以规约到 $SAT$ 问题</p><p>综上, $SAT$ 问题是 $NP-C$ 问题</p><h3 id="k-CNF-问题"><a href="#k-CNF-问题" class="headerlink" title="$k-CNF$ 问题"></a>$k-CNF$ 问题</h3><p>若布尔公式是由 $AND$ 连接若干 $OR$ 字句，且每个子句中恰有 $k$ 个布尔变量或其否定形式，问其是否可满足。</p><p>例如 $(x_1 \lor x_2) \land (\urcorner x_1 \lor x_3) \land (\urcorner x_2 \lor x_3)$ 就是一个 $2-CNF$ 问题</p><p>可以确定 $2-CNF$ 是一个 $P$ 类问题, 但是 $3-CNF$ 可以被证明为 $NP-C$ 问题</p><p>证明略</p><h3 id="哈密顿回路和旅行商问题"><a href="#哈密顿回路和旅行商问题" class="headerlink" title="哈密顿回路和旅行商问题"></a>哈密顿回路和旅行商问题</h3><p>无向图 $G(V,E)$ 中的一条 <strong>哈密顿回路</strong> 是通过 $V$ 中的每个顶点的简单回路。具有这种回路的图被称为 <strong>哈密顿图</strong> .</p><p>可以知道验证一个图是否为哈密顿图需要 $O(n!)$ 的时间复杂度, 且在 $O(n^2)$ 时间内验证验证一个回路是否为哈密顿回路。所以显然哈密顿回路问题是一个 $NP$ 问题。</p><p>而 $NP-C$ 顶点覆盖问题可以规约到哈密顿回路问题上，所以哈密顿回路问题是一个 $NP-C$ 问题。</p><img data-src="/images/Hamiltonian_path.png" style="display: block; margin: auto; height: 250px" alt="哈密顿回路"/><p>在旅行商问题中，一个售货员必须访问一个完全图中所有顶点且回到最初顶点，花费的费用是边权之和，求最小费用。</p><p>易知旅行商问题也是一个哈密顿回路，所以哈密顿回路可以规约到旅行商问题上。而旅行商问题显然是 $NP$ 问题，所以旅行商问题也是 $NP-C$ 问题。</p><h2 id="NP-Hard-问题"><a href="#NP-Hard-问题" class="headerlink" title="$NP-Hard$ 问题"></a>$NP-Hard$ 问题</h2><p>所有 $NP$ 问题都可以规约到该类问题，且该类问题不一定是 $NP$ 问题，即可能无法在多项式时间内验证一个解的证书的正确性。</p><p>该类问题为最难的一类问题。</p><img data-src="/images/P_np_np-complete_np-hard.png" style="background-color: #515151" alt="P ≟ NP"/>]]></content:encoded>
      
      
      <category domain="http://nottogawabutsakiko.github.io/categories/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <category domain="http://nottogawabutsakiko.github.io/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>http://nottogawabutsakiko.github.io/%E7%AC%94%E8%AE%B0/calculation%20therom%20base/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
